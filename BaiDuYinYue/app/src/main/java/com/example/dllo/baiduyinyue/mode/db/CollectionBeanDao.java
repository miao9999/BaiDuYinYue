package com.example.dllo.baiduyinyue.mode.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.dllo.baiduyinyue.mode.db.CollectionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECTION_BEAN".
*/
public class CollectionBeanDao extends AbstractDao<CollectionBean, Long> {

    public static final String TABLENAME = "COLLECTION_BEAN";

    /**
     * Properties of entity CollectionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserPassword = new Property(2, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property SongName = new Property(3, String.class, "songName", false, "SONG_NAME");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property SongUrl = new Property(5, String.class, "songUrl", false, "SONG_URL");
        public final static Property Pic = new Property(6, byte[].class, "pic", false, "PIC");
        public final static Property PicUrl = new Property(7, String.class, "picUrl", false, "PIC_URL");
        public final static Property Other = new Property(8, String.class, "other", false, "OTHER");
        public final static Property Others = new Property(9, String.class, "others", false, "OTHERS");
    };


    public CollectionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"USER_PASSWORD\" TEXT," + // 2: userPassword
                "\"SONG_NAME\" TEXT," + // 3: songName
                "\"AUTHOR\" TEXT," + // 4: author
                "\"SONG_URL\" TEXT," + // 5: songUrl
                "\"PIC\" BLOB," + // 6: pic
                "\"PIC_URL\" TEXT," + // 7: picUrl
                "\"OTHER\" TEXT," + // 8: other
                "\"OTHERS\" TEXT);"); // 9: others
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CollectionBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(3, userPassword);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(4, songName);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String songUrl = entity.getSongUrl();
        if (songUrl != null) {
            stmt.bindString(6, songUrl);
        }
 
        byte[] pic = entity.getPic();
        if (pic != null) {
            stmt.bindBlob(7, pic);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(8, picUrl);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(9, other);
        }
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(10, others);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CollectionBean readEntity(Cursor cursor, int offset) {
        CollectionBean entity = new CollectionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userPassword
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // songName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // songUrl
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // pic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // picUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // other
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // others
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CollectionBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSongName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSongUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPic(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setPicUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOther(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOthers(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CollectionBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CollectionBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
